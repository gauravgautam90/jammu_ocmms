//import java.io.BufferedInputStreamimport java.io.*;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.text.ParseException;import java.util.Date;class ConsentApprovalRightsController {def updateApproval={}// the delete, save and update actions only accept POST requestsstatic allowedMethods = [delete:'POST', save:'POST', update:'POST']def show = {	 try {		 def consentApprovalInstance = ConsentApplicationApprovalCriteria.get( params.id )		 if(!consentApprovalInstance) {		 flash.message = "Record not found with id ${params.id}"		 redirect(action:create)		 }		 else {		 return [ consentApprovalInstance : consentApprovalInstance ]		 } }	 catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def create = {	 try {		 println("helioo")		 def consentApprovalInstance = new ConsentApplicationApprovalCriteria()		 consentApprovalInstance.properties = params		 return ['consentApprovalInstance':consentApprovalInstance]		 	 }catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def edit = {	 try {		 if(params.grp == null || params.grp == "")		 {		 flash.message = "Please Select The Role to be Updated"		 redirect(action:updateApproval)		 }		 else		 {		 def roleInstance = RoleMaster.get( (params.grp).toLong())		 def category = params.category		 def scale = ""		 def consentApprovalInstance = ConsentApplicationApprovalCriteria.find("from ConsentApplicationApprovalCriteria ca where ca.role=?",[roleInstance])		 println("consentApprovalInstance..."+consentApprovalInstance)		 if(!consentApprovalInstance) {		 flash.message = "Rights are not set for this role"		 redirect(action:updateApproval)		 }		 else {		 return [consentApprovalInstance : consentApprovalInstance]		 }		 }	 }	 catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def save = {	 try {		 def consentApprovalInstance = new ConsentApplicationApprovalCriteria(params)		 def groupMasterInstance = GroupMaster.get( (params.groupId).toLong())		 def roleMasterInstance = RoleMaster.get( (params.grp).toLong())		 def category =params.category		 def scale = ""		 def consentApprovalInstance1 = ConsentApplicationApprovalCriteria.find("from ConsentApplicationApprovalCriteria ca where ca.group=? and ca.role=? and ca.category=? ",[groupMasterInstance,roleMasterInstance,category])		 if(params.groupId == null) {		 flash.message = "Please Select Dealing Group"		 render(view:'create',model:[consentApprovalInstance:consentApprovalInstance])		 }		 else if(params.grp == null) {		 flash.message = "Role is not Selected"		 render(view:'create',model:[consentApprovalInstance:consentApprovalInstance])		 }		 else if(consentApprovalInstance1) {		 flash.message = "Rights already set for this role"		 render(view:'create',model:[consentApprovalInstance:consentApprovalInstance])		 }		 else{			 consentApprovalInstance.group = groupMasterInstance		 consentApprovalInstance.role = roleMasterInstance		 consentApprovalInstance.createdBy =session.userMaster		 consentApprovalInstance.indScale =""		 if(!consentApprovalInstance.hasErrors() && consentApprovalInstance.save()) {		 flash.message = "Approval Criteria Created"		 redirect(action:show,id:consentApprovalInstance.id)		 }		 else {		 	consentApprovalInstance.errors.each{		 		println it		 	}		 render(view:'create',model:[consentApprovalInstance:consentApprovalInstance])		 }		 }	 }catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def updateSelect = {	 try {		 if(params.selectedValue=='xyz')		 {		 def roleList= new ArrayList()		 render g.select( width:'10',from:roleList,optionKey:'id', id:'grp',name:'grp')		 }		 else{		 def groupId = OfficeMaster.get((params.selectedValue).toInteger())		 def roleList = GroupMaster.findAllByOffice(groupId)		 render g.select( width:'10',from:roleList,optionKey:'id', id:'grp',name:'grp')		 }	 }catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def update = {	 try {		 def consentApprovalInstance = ConsentApplicationApprovalCriteria.get(params.id )		 if(consentApprovalInstance) {		 if(params.version) {		 def version = params.version.toLong()		 if(consentApprovalInstance.version > version) {		 consentApprovalInstance.errors.rejectValue("version", "consentApprovalInstance.optimistic.locking.failure", "Another user has updated this Role while you were editing.")		 render(view:'edit',model:[consentApprovalInstance:consentApprovalInstance])		 return		 }		 }		 consentApprovalInstance.properties = params		 consentApprovalInstance.createdBy=session.userMaster		 if(!consentApprovalInstance.hasErrors() && consentApprovalInstance.save()) {		 flash.message = "Approval Criteria updated"		 redirect(action:show,id:consentApprovalInstance.id)		 }		 else {		 render(view:'edit',model:[consentApprovalInstance:consentApprovalInstance])		 }		 }		 else {		 flash.message = "Role not found with id ${params.id}"		 redirect(action:edit,id:params.id)		 }		 	 }catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}def delete = {	 try {		 def consentApprovalInstance = ConsentApplicationApprovalCriteria.get(params.id )		 if(consentApprovalInstance) {		 consentApprovalInstance.delete()		 redirect(action:updateApproval,id:params.id)		 }		 else {		 flash.message = "Criteria not set for this combination"		 redirect(action:edit,id:params.id)		 }	 }catch(Exception e) {		             e.printStackTrace();		 			 flash.message = "Server Busy ..Please try after some time....";		 			if(session.indUser){		 		redirect(controller:'indUser',action:'openIndustryHome')		  }		  else if(session.userMaster){		   redirect(controller:'userMaster',action:'openSpcbHome');		  }else{		         session.invalidate()		         redirect(uri:'/index.gsp');		  }		    }}}