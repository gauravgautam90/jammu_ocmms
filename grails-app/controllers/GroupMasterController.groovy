import java.io.*;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.text.ParseException;import java.util.Date; class GroupMasterController {        def index = {    		 try {    		     redirect(action:create,params:params)         }catch(Exception e) {                e.printStackTrace();    			 flash.message = "Server Busy ..Please try after some time....";    			if(session.indUser){    		redirect(controller:'indUser',action:'openIndustryHome')     }     else if(session.userMaster){      redirect(controller:'userMaster',action:'openSpcbHome');     }else{            session.invalidate()            redirect(uri:'/index.gsp');     }       }    }        def gotoCreate = {    		 try {    	    	 redirect(action:create,params:params)      	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def updateGroup = { }        def del = {    		 try {    	    	 redirect(action:deleteGroup,params:params)     	        		 }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def deleteGroup = { }        def delRes = { }        def listOfAppl = {    		 try {    	    	 params.max = Math.min( params.max ? params.max.toInteger() : 02,  100)        	        [ groupMasterInstanceList: abc, groupMasterInstanceTotal:  var5]         }catch(Exception e) {                e.printStackTrace();    			 flash.message = "Server Busy ..Please try after some time....";    			if(session.indUser){    		redirect(controller:'indUser',action:'openIndustryHome')     }     else if(session.userMaster){      redirect(controller:'userMaster',action:'openSpcbHome');     }else{            session.invalidate()            redirect(uri:'/index.gsp');     }       }    }        def searchUtility = {    		 try {    	    	 def appIdList=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.completionStatus != 'pending' order by dateCheck.id desc");     	    		render(view:'searchUtility',model:[appIdList:appIdList])    	    }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def testCalendar = {}        def testPurpose = {}        def search = 	{    		println("params...."+params)   		 try {   	    	 def appIdList=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.completionStatus != 'pending'");    	    		 params.max = Math.min( params.max ? params.max.toInteger() : 5,  100)   	   		   def checkDate=null   	   		def xyz5   	   		def qwe   	   		def statusList= new ArrayList()   	   		if(params.max)   	   		{   	   			xyz5=(params.max).toInteger()   	   		}   	   		else   	   		{   	   			xyz5=10   	   		}   	   		if(params.offset)   	   		{   	   			qwe=(params.offset).toInteger()   	   		}   	   		else   	   		{   	   			qwe=0   	   		}   	    		def paramList= new ArrayList()   	    		paramList=params   	    			def appList= new ArrayList()   					def allFour= new ArrayList()   					def abc= new IndApplicationDetails()   	    		def abcR= new IndApplicationDetails()   	    		def pendingWith= new ArrayList()   	    		def pendingWithRole= new ArrayList()   					int total;   	    		   				if(params.searchOp==null)   				{   					flash.message = "Please Select The Radio Button "   					redirect(action:searchUtility)   				}   			   				else   				{   					if(params.searchOp=="ApplId")   						{   							if(params.autocomplete_parameter==null || params.autocomplete_parameter=="")   							{   								flash.message="Please Enter Application Id"   								redirect(action:searchUtility)   								return;   							}   							else   							{   								abc=IndApplicationDetails.find("from IndApplicationDetails where id=? and completionStatus='completed'",[(params.autocomplete_parameter).toLong()]);   							   									if(abc){   										   									}   									else{   										   										flash.message="Please Enter Valid Application Id"   											redirect(action:searchUtility)   											return;   									}   											def indappInst=abc   											def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   											if(checkInst)   											{   											statusList.add(checkInst.applicationStatus)   											pendingWith.add(checkInst.pendingWith)   											pendingWithRole.add(checkInst.role)   											}   											else   											{   												statusList.add("Unattended")   												pendingWith.add("Unknown")   										    	pendingWithRole.add("Unknown")   											}   								   								def abcF=abc.actualApplicationDate   								DateCustom dd=new DateCustom()   										   										   										if(abcF.getClass().getName()=="java.sql.Date")   	    								{   	    									abc.actualApplicationDate=abcF   	    									   	    								}   	    								else   	    								{   	    									def xyz= dd.toDate(abcF)   	    								abc.actualApplicationDate=xyz   	    	   					   	    								}   							}   							total=1   	    	   						}   						if(params.searchOp=="ApplName")   						{   							def firstInput = (params.autocomplete_parameter1).toLowerCase()   				    		   								def input1= firstInput + '%'    								   								if(params.autocomplete_parameter1==null || params.autocomplete_parameter1=="")   									{   										flash.message="Please Write The Name Of Industry To Search"   										redirect(action:searchUtility)   									}   								else   									{	   								   										abcR = IndApplicationDetails.findAll("from IndApplicationDetails as country where lower(country.applicationName) like :applicationName and country.completionStatus != 'pending'", [applicationName:input1])    										abc = IndApplicationDetails.findAll("from IndApplicationDetails as country where lower(country.applicationName) like :applicationName  and country.completionStatus != 'pending'", [applicationName:input1])    											     										total=abcR.size()   										for(int abcIndex=0;abcIndex<abc.size();abcIndex++)   											   										{   											def indappInst=abc.get(abcIndex)   											   											   											def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   											if(checkInst)   											{   											statusList.add(checkInst.applicationStatus)   											pendingWith.add(checkInst.pendingWith)   											pendingWithRole.add(checkInst.role)   											}   											else   											{   												statusList.add("Unattended")   												pendingWith.add("Unknown")   										    	pendingWithRole.add("Unknown")   											}   											   										}   										for(int p=0;p<abc.size();p++)   											{   												def abcFinaly=(abc.get(p)).actualApplicationDate   											DateCustom dd=new DateCustom()   												   												if(abcFinaly.getClass().getName()=="java.sql.Date")   			    								{   													(abc.get(p)).actualApplicationDate=abcFinaly   			    									   			    								}   			    								else   			    								{   			    									def xyz= dd.toDate(abcFinaly)   													   													(abc.get(p)).actualApplicationDate=xyz   			    	   					   			    								}   											}   										   										}   							}   	    			   					if(params.searchOp=="Others")   					{   						def startDate1=params.start_date_value   						def endDate1=params.end_date_value   						def x   						def y   						def totalRes   						def categories=params.category   						def status=params.status   						try   						{   							def sdfh = new SimpleDateFormat("dd/MM/yyyy");    							x = sdfh.parse(startDate1); //Date   							y = sdfh.parse(endDate1);   							checkDate="checked"   						}   						catch(Exception e)   						{   							flash.message="Enter Both The Dates in correct Format"   							redirect(action:searchUtility)   						}   	    			if(checkDate)   	    			{   	    				java.sql.Date sqlDate = new java.sql.Date(x.getTime())   						java.sql.Date sqlDate2 = new java.sql.Date(y.getTime())	   						sqlDate2.setDate((sqlDate2.getDate()+1))   						if(sqlDate>sqlDate2)   						{   							flash.message="End Date should be Greater than Starting Date"   								redirect(action:searchUtility)   						}else   						{   						if(startDate1 && endDate1 && categories=="xyz" && status=="xyz")   						{   							abcR=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.actualApplicationDate >= ? and dateCheck.actualApplicationDate <= ? and dateCheck.completionStatus != 'pending'",  [sqlDate,sqlDate2] );    							abc=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.actualApplicationDate >= ? and dateCheck.actualApplicationDate <= ? and dateCheck.completionStatus != 'pending' order by dateCheck.id",  [sqlDate,sqlDate2] );    	    		            total=abcR.size()   	    		               	    		            for(int abcIndex=0;abcIndex<abc.size();abcIndex++)   											   										{   											def indappInst=abc.get(abcIndex)   											   											def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   											if(checkInst)   											{   											statusList.add(checkInst.applicationStatus)   											pendingWith.add(checkInst.pendingWith)   											pendingWithRole.add(checkInst.role)   											}   											else   											{   												statusList.add("Unattended")   												pendingWith.add("Unknown")   											    pendingWithRole.add("Unknown")   											}   											   										}   	    		               							for(int p=0;p<abc.size();p++)   							{   								def abcFinal=(abc.get(p)).actualApplicationDate   								   								if(abcFinal.getClass().getName()=="java.sql.Date")   	    								{   									(abc.get(p)).actualApplicationDate=abcFinal   	    								}   									else   									{   							   										DateCustom dd=new DateCustom()   										def xyz= dd.toDate(abcFinal)   									(abc.get(p)).actualApplicationDate=xyz   									}   								   	   					}   	    				}   	    		    						if(startDate1 && endDate1 && categories != "xyz" && status=="xyz")   						{   	    				abcR=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and dateCheck.indUser.category.name = ? and dateCheck.completionStatus != 'pending'", [sqlDate,sqlDate2,categories]);    							abc=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck where dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and dateCheck.indUser.category.name = ? and dateCheck.completionStatus != 'pending' order by dateCheck.id ", [sqlDate,sqlDate2,categories]);    							total=abcR.size()   							   							for(int abcIndex=0;abcIndex<abc.size();abcIndex++)   											   										{   											def indappInst=abc.get(abcIndex)   											def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   											if(checkInst)   											{   											statusList.add(checkInst.applicationStatus)   											pendingWith.add(checkInst.pendingWith)   											pendingWithRole.add(checkInst.role)   											}   											else   											{   												statusList.add("Unattended")   												pendingWith.add("Unknown")   										    	pendingWithRole.add("Unknown")   											}   											   										}   							   							for(int r=0;r<abc.size();r++)   							{   								def abcFin=(abc.get(r)).actualApplicationDate   								   								if(abcFin.getClass().getName()=="java.sql.Date")   	    								{   									(abc.get(r)).actualApplicationDate=abcFin   	    								}   									else   									{   							   										DateCustom dd1=new DateCustom()   										def xyz1= dd1.toDate(abcFin)   										(abc.get(r)).actualApplicationDate=xyz1   									}   							}   	    				    						}	   						if(startDate1 && endDate1 && categories != "xyz" && status != "xyz" )   						{   							def	nis=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck, ApplicationPendingDetails appPendDet  WHERE dateCheck.id = appPendDet.application  and dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and dateCheck.indUser.category.name = ? and appPendDet.applicationStatus = ?", [sqlDate,sqlDate2,categories,status]);    							def	xyz=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck, ApplicationPendingDetails appPendDet  WHERE dateCheck.id = appPendDet.application  and dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and dateCheck.indUser.category.name = ? and appPendDet.applicationStatus = ? order by dateCheck.id ", [sqlDate,sqlDate2,categories,status]);    							for(int g=0;g<xyz.size();g++)   							{   								allFour=xyz.get(g)   								if(allFour)   								{   									appList.add(((ArrayList)allFour).get(0))   								}   							}   							abc=appList   							   							for(int abcIndex=0;abcIndex<abc.size();abcIndex++)   								   							{   								def indappInst=abc.get(abcIndex)   								def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   								if(checkInst)   								{   								statusList.add(checkInst.applicationStatus)   								pendingWith.add(checkInst.pendingWith)   								pendingWithRole.add(checkInst.role)   								}   								else   								{   									statusList.add("Unattended")   									pendingWith.add("Unknown")   							    	pendingWithRole.add("Unknown")   									   								}   								   							}   							   							total=nis.size()   							for(int d=0;d<abc.size();d++)   							{   								def abcFina=(abc.get(d)).actualApplicationDate   								   								if(abcFina.getClass().getName()=="java.sql.Date")   	    								{   									(abc.get(d)).actualApplicationDate=abcFina   	    								}   									else   									{   										DateCustom dd2=new DateCustom()   										def xyz2= dd2.toDate(abcFina)   									   										(abc.get(d)).actualApplicationDate=xyz2   									}   							}   	    			   						}   	    			if(startDate1 && endDate1 && categories == "xyz" && status != "xyz" )   						{   							def	ewq=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck, ApplicationPendingDetails appPendDet  WHERE dateCheck.id = appPendDet.application  and dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and appPendDet.applicationStatus = ?", [sqlDate,sqlDate2,status]);   							def	xyz=IndApplicationDetails.findAll("From IndApplicationDetails dateCheck, ApplicationPendingDetails appPendDet  WHERE dateCheck.id = appPendDet.application  and dateCheck.actualApplicationDate > ? and dateCheck.actualApplicationDate < ? and appPendDet.applicationStatus = ? order by dateCheck.id ", [sqlDate,sqlDate2,status]);    	    			for(int a=0;a<xyz.size();a++)   							{   								allFour=xyz.get(a)   								if(allFour)   								{   									appList.add(((ArrayList)allFour).get(0))   								}   							}   	        			abc=appList   	        			   	        			for(int abcIndex=0;abcIndex<abc.size();abcIndex++)   							   						{   							def indappInst=abc.get(abcIndex)   							   							   							def checkInst=ApplicationPendingDetails.findByApplication(indappInst)   							if(checkInst)   							{   							statusList.add(checkInst.applicationStatus)   							pendingWith.add(checkInst.pendingWith)   							pendingWithRole.add(checkInst.role)   							}   							else   							{   								statusList.add("Unattended")   								pendingWith.add("Unknown")   						    	pendingWithRole.add("Unknown")   							}   							   						}   	        			total=ewq.size()   	        				for(int k=0;k<abc.size();k++)   							{   								def abcFinl=(abc.get(k)).actualApplicationDate   								   								if(abcFinl.getClass().getName()=="java.sql.Date")   	    								{   									(abc.get(k)).actualApplicationDate=abcFinl   	    								}   									else   									{   										DateCustom dd3=new DateCustom()   										def xyz3= dd3.toDate(abcFinl)   										   										(abc.get(k)).actualApplicationDate=xyz3   										   									}   							   							}   						}   	    		   						}   	    		   					}   	    		   					}	   	    		}		      					if(abc.getClass().getName()=="java.util.ArrayList")   					{   						   					if(abc.size()==0)   					{   						   						flash.message="No Result Found With This Search Combination"   					}   					}   					session.appIdList=appIdList   					session.abc=abc   					session.total=total   					session.paramList=paramList   					session.statusList=statusList   					session.pendingWith=pendingWith   					session.pendingWithRole=pendingWithRole   					render(view:'searchUtility',model:[appIdList:appIdList,abc:abc,total:total,paramList:paramList,statusList:statusList,pendingWith:pendingWith,pendingWithRole:pendingWithRole])   	    }catch(Exception e) {   	            e.printStackTrace();   				 flash.message = "Server Busy ..Please try after some time....";   				if(session.indUser){   			redirect(controller:'indUser',action:'openIndustryHome')   	 }   	 else if(session.userMaster){   	  redirect(controller:'userMaster',action:'openSpcbHome');   	 }else{   	        session.invalidate()   	        redirect(uri:'/index.gsp');   	 }   	   }	}        static allowedMethods = [delete:'POST', save:'POST', update:'POST']    def list = {    	 try {    	    	params.offset=20    	      params.max = Math.min( params.max ? params.max.toInteger() : 10,  100)    	    def listlist=GroupMaster.findAll("From GroupMaster ",[offset:17])    	     [ groupMasterInstanceList: listlist, groupMasterInstanceTotal:	GroupMaster.count()]    	    	render(view:'searchUtility',model:[appIdList:appIdList,abc:abc,total:total,paramList:paramList,statusList:statusList,pendingWith:pendingWith,pendingWithRole:pendingWithRole])    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }	    }        def show = {    	 try {    	    	 def groupMasterInstance = GroupMaster.get( params.id )    	        if(!groupMasterInstance) {    	            flash.message = "GroupMaster not found with id ${params.id}"    	            redirect(action:create)    	        }    	        else { return [ groupMasterInstance : groupMasterInstance ] }    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }    def delete =     	{    	 try {    	    	def rCheck = true    	    		if(params.grp == null || params.grp=="")    	    			{    	    				flash.message = "Please Select The Group To Delete"    	    				redirect(action:updateGroup)    	    			}    	    		else    	    			{    	    				def groupMasterInstance = GroupMaster.get( params.grp )    	    				def roleMasterInstance1 = RoleMaster.findAllByGroup(groupMasterInstance)    	    				    	    				for(int i=0;i<roleMasterInstance1.size();i++)    	    				{    	    					if(ApplicationPendingDetails.findByRole(roleMasterInstance1.get(i)) ||ApplicationProcessingDetails.findByRole(roleMasterInstance1.get(i)))    	        	 			{	rCheck = false    	        	 				    	    		    	 			}    	    				}    	    				    	    				if(rCheck)    	    				{    	    			for(int i=0;i<roleMasterInstance1.size();i++)    	    					{    	    					if(roleMasterInstance1.get(i))    					    							{    					    					def workFlowMasterInstance1 =WorkFlowMaster.findAllByGroup(groupMasterInstance)    					    								if(workFlowMasterInstance1.size()>0)    					    									{    					    										for(int var=0;var<workFlowMasterInstance1.size();var++)    					    											{    					    												try    					    													{    					    														workFlowMasterInstance1.get(var).delete()    					    													}    					    												catch(Exception e)    					    													{    					    													}    					    											}    					    									}    					    									def roleVsActivityInstance =RoleVsActivity.findAllByRole(roleMasterInstance1.get(i))    					    									if(roleVsActivityInstance)    					    										{    					    											for(int var=0;var<roleVsActivityInstance.size();var++)    					    												{    					    													roleVsActivityInstance.get(var).delete()    					    												}    					    										}    					    									def roleProfileAssignmentInstance1 = RoleProfileAssignment.findByRole(roleMasterInstance1.get(i))    					    									if(roleProfileAssignmentInstance1)    					    										{    					    											roleProfileAssignmentInstance1.delete()    					    										}    					    									(roleMasterInstance1.get(i)).delete()    					    								}    					    						}    	    								def groupDistrictInstance = GroupDistrictMaster.findAllByGroup(groupMasterInstance)    					    				if(groupDistrictInstance)    					    					{    					    						for(int l=0;l<groupDistrictInstance.size();l++)    					    						{    					    							(groupDistrictInstance.get(l)).delete()    					    						    					    						}    					    					}    					    				if(groupMasterInstance)    					    					{    					    						try {    					    								groupMasterInstance.delete()    					    								flash.message = "Group ${groupMasterInstance} deleted"    					    								redirect(action:delRes)    					    							}    					    						catch(org.springframework.dao.DataIntegrityViolationException e)     					    							{    					    								flash.message = "GroupMaster ${groupMasterInstance} could not be deleted"    					    								redirect(action:updateGroup,id:params.id)    					    							}    					    					}    					    				else     					    					{    					    						flash.message = "GroupMaster not found with id ${params.id}"    					    						redirect(action:updateGroup)    					    					}    	    			}	else    	    			{    		 				flash.message = "This Group Is Active Hence Cannot Be Deleted"    		 				redirect(action:delRes)    		    	 			}    	    		}    	    }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    	}    def edit = {    	 try {    	    	if(params.grp == null || params.grp == "")    	    	{    	    		flash.message = "Please Select The  Group To Update"    	    		redirect(action:updateGroup)    	    	}    	    	else    	    	{    	    	def groupMasterInstance = GroupMaster.get( (params.grp).toLong())    	      if(!groupMasterInstance) {    	            flash.message = "GroupMaster not found with id ${params.id}"    	            redirect(action:updateGroup)    	        }    	        else {    	            return [ groupMasterInstance : groupMasterInstance ]    	        }    	    	}    	    }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }    def update = {    	 try {    	    	 def groupMasterInstance = GroupMaster.get( params.id )    	        if(groupMasterInstance) {    	            if(params.version) {    	                def version = params.version.toLong()    	                if(groupMasterInstance.version > version) {    	                        	                    groupMasterInstance.errors.rejectValue("version", "groupMaster.optimistic.locking.failure", "Another user has updated this GroupMaster while you were editing.")    	                    render(view:'edit',model:[groupMasterInstance:groupMasterInstance])    	                    return    	                }    	            }    	            groupMasterInstance.properties = params    	            groupMasterInstance.updatedBy=session.userMaster    	            if(!groupMasterInstance.hasErrors() && groupMasterInstance.save()) {    	                flash.message = "Group "+groupMasterInstance+" updated"    	                redirect(action:show,id:groupMasterInstance.id)    	            }    	            else {    	                render(view:'edit',model:[groupMasterInstance:groupMasterInstance])    	            }    	        }    	        else {    	            flash.message = "GroupMaster not found with id ${params.id}"    	            redirect(action:edit,id:params.id)    	        }    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }    def create = {    	 try {    	    	 def groupMasterInstance = new GroupMaster()    	        groupMasterInstance.properties = params    	        return ['groupMasterInstance':groupMasterInstance]    	        		 }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }    def save = {    	 try {    	    	 def groupMasterInstance = new GroupMaster(params)    	        groupMasterInstance.createdBy =session.userMaster    	      groupMasterInstance.updatedBy =session.userMaster    	        if(!groupMasterInstance.hasErrors() && groupMasterInstance.save()) {    	            flash.message = "Group ${groupMasterInstance} created"    	            redirect(action:show,id:groupMasterInstance.id)    	        }    	        else {    	            render(view:'create',model:[groupMasterInstance:groupMasterInstance])    	        }    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def updateSelect = {    	 try {    	    	if(params.selectedValue=='xyz')    	    	{    	    		def roleList= new ArrayList()    	    		render g.select( width:'10',from:roleList,optionKey:'id',  id:'grp',name:'grp')    	    	}    	    	else{    	    	def groupId = OfficeMaster.get((params.selectedValue).toInteger())    	    	def roleList = GroupMaster.findAllByOffice(groupId)    	        	    	render g.select( width:'10',from:roleList,optionKey:'id',  id:'grp',name:'grp')    	    	}    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def popsave = {    	 try {    	    	def groupMasterInstance = new GroupMaster(params)    	        groupMasterInstance.createdBy =session.userMaster    	        	groupMasterInstance.updatedBy =session.userMaster    	        if(!groupMasterInstance.hasErrors() && groupMasterInstance.save()) {    	            flash.message = "Group ${groupMasterInstance} created"    	            	 redirect(uri:"/groupMaster/showpop.gsp")    	        }    	        else {    	        	flash.message="Group cannot be created.....invalid fields"    	        		      		        	redirect(uri:"/groupMaster/showpop.gsp")    	        }    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }      def ajaxAutoComplete = {    	 try {    	    	if(params.autocomplete_parameter1)    	    	{    	    			def firstInput = (params.autocomplete_parameter1).toLowerCase()    	    		def input = firstInput + '%'     	    		    		    	    		def list = IndApplicationDetails.findAll("from IndApplicationDetails as country where lower(country.applicationName) like :applicationName and country.completionStatus != 'pending'", [applicationName:input])     	    		StringBuffer idList = new StringBuffer()     	    		idList.append("<ul>")    	    		list?.each{c -> idList.append("<li>" + c.applicationName+"</li>")}     	    		idList.append("</ul>")       	    		render idList.toString()    	    		}    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }        def ajaxAutoCompleteTest = {    	 try {    	    	if(params.autocomplete_parameter1)    	    	    	{    	    	    			def firstInput = (params.autocomplete_parameter1).toLowerCase()    	    	    		def input = firstInput + '%'     	    	    		def list = IndustryRegMaster.findAll("from IndustryRegMaster as country where lower(country.indName) like :applicationName ", [applicationName:input])     	    	    		StringBuffer idList = new StringBuffer()     	    	    		idList.append("<ul>")    	    	    		list?.each{c -> idList.append("<li>" + c.indName+"</li>")}     	    	    		idList.append("</ul>")       	    	    		render idList.toString()    	    	    		}    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    } 	def ajaxAutoCompleteTestApplied = {    	 try {    	    	if(params.autocomplete_parameter1 && (params.autocomplete_parameter1).length()>=3)    	    	{    	    		def firstInput = (params.autocomplete_parameter1).toLowerCase()    	    		def input = firstInput + '%'     	    		UserProfile aab=(UserProfile)session.getAttribute("userprof");    	    		 def appIdList=new ArrayList()    	    		    	    def userMasterInstance=session.userMaster	    	    if(userMasterInstance.accessLevel!="admin"){    		 def roleProfileInstance=RoleProfileAssignment.findAll("From RoleProfileAssignment dateCheck where dateCheck.primaryEmployee = ? order by dateCheck.id desc",[aab])    		    		 def districtList=new ArrayList()    		 def groupList=new ArrayList()    		    	     for(int i=0;i<roleProfileInstance.size();i++)    	     {    	    	 def roleMasterInstance=RoleMaster.get(roleProfileInstance[i].role.id)    	    	 def groupId=roleMasterInstance.group.id    	    	 if(!(groupList.contains(groupId)))    			 {     	    		 groupList.add(groupId)    	         }     	     }    		 for(int i=0;i<groupList.size();i++)    	     {    	    	 def groupMasterInst=GroupMaster.get(groupList[i].toLong())    	    	 def groupDistrictInst=GroupDistrictMaster.findAllByGroup(groupMasterInst)    	    	 for(int j=0;j<groupDistrictInst.size();j++)    	         {    	    	 if(!(districtList.contains(groupDistrictInst.get(j).district.id)))    			 {     	    	 districtList.add(groupDistrictInst.get(j).district.id)    	         }      	         }    	     }    		 for(int i=0;i<districtList.size();i++)    	     {    		    			 def appId = AllSummaryReport.findAll("from AllSummaryReport as country where lower(country.applicationName) like :applicationName and country.districtId = :jId  order by applicationName,applicationRecieptDate", [applicationName:input,jId:districtList.get(i).toString()])    			 for(int j=0;j<appId.size();j++)    			 {    			 if(!(appIdList.contains(appId[j])))    			 {    			 appIdList.add(appId[j])    			 }    			 }    	     			}    	    		 }else{    	    			 appIdList=AllSummaryReport.findAll("from AllSummaryReport as country where lower(country.applicationName) like :applicationName order by applicationName,applicationRecieptDate", [applicationName:input])    	    		 }    				Set<String> uniqueIndustry=new LinkedHashSet<String>();    				StringBuffer idList = new StringBuffer()     	    		idList.append("<ul>")    	    		appIdList?.each{c -> if(uniqueIndustry.add(c.indRegMasterId.toString())) idList.append("<li>" + c.applicationName+"</li>")}     	    		idList.append("</ul>")       	    		render idList.toString()    	    		}    	     }catch(Exception e) {    	            e.printStackTrace();    				 flash.message = "Server Busy ..Please try after some time....";    				if(session.indUser){    			redirect(controller:'indUser',action:'openIndustryHome')    	 }    	 else if(session.userMaster){    	  redirect(controller:'userMaster',action:'openSpcbHome');    	 }else{    	        session.invalidate()    	        redirect(uri:'/index.gsp');    	 }    	   }    }    def popPageSummary={      	 try {      		def appIdList=session.appIdList   		def abc=session.abc   		def total=session.total   		def paramList=session.paramList   		def statusList=session.statusList   		def pendingWith=session.pendingWith   		def pendingWithRole=session.pendingWithRole      				render(view:'popPageSummary',model:[appIdList:appIdList,abc:abc,total:total,paramList:paramList,statusList:statusList,total:total,paramList:paramList,pendingWith:pendingWith,pendingWithRole:pendingWithRole])      	     }catch(Exception e) {      	            e.printStackTrace();      				 flash.message = "Server Busy ..Please try after some time....";      				if(session.indUser){      			redirect(controller:'indUser',action:'openIndustryHome')      	 }      	 else if(session.userMaster){      	  redirect(controller:'userMaster',action:'openSpcbHome');      	 }else{      	        session.invalidate()      	        redirect(uri:'/index.gsp');      	 }      	   }   }    /////////////////////////////////Consent Application processed///////////////////////////////////    def searchUtility11 = {        	try{    		def appIdList=""    		render(view:'searchUtility11',model:[appIdList:appIdList])        	}catch(Exception e) {                e.printStackTrace();    			 flash.message = "Server Busy ..Please try after some time....";    			if(session.indUser){    		redirect(controller:'indUser',action:'openIndustryHome')     }     else if(session.userMaster){      redirect(controller:'userMaster',action:'openSpcbHome');     }else{            session.invalidate()            redirect(uri:'/index.gsp');     }       }    }    def search122 =     {        try{        println("params PPPqqqq"+params)        java.sql.Date sqlDate        java.sql.Date sqlDate2        java.sql.Date sqlDate3        def appIdList=""        def arr11        def checkDate=null        		        		        		def paramList= new ArrayList()        		paramList=params        		def appList= new ArrayList()        		def allFour= new ArrayList()        		def abc= 1        		def appLica = new ArrayList();        		def abcR= new IndApplicationDetails()        		def pendingWith= new ArrayList()        		def pendingWithRole= new ArrayList()        		int total;        		if(params.searchOp==null)        		{        			flash.message = "Please Select The Radio Button "        			redirect(action:searchUtility11)        		}        		else        		{        		if(params.searchOp=="Others")        			{        			def startDate1=params.start_date_value        				def endDate1=params.end_date_value        				def x        				def y        				def totalRes        			def categories ="xyz"        				def status ="xyz"        				try        				{        					def sdfh = new SimpleDateFormat("dd/MM/yyyy");         					x = sdfh.parse(startDate1); //Date        					y = sdfh.parse(endDate1);        					checkDate="checked"        				}        				catch(Exception e)        				{        					flash.message="Enter Both The Dates in correct Format"        					redirect(action:searchUtility11)        				}        			if(checkDate)        			{        			sqlDate = new java.sql.Date(x.getTime())        			sqlDate2 = new java.sql.Date(y.getTime())	        			sqlDate3 = new java.sql.Date(y.getTime())        			sqlDate2.setDate((sqlDate2.getDate()+1))        				if(sqlDate>sqlDate2)        				{        					flash.message="End Date should be Greater than Starting Date"        						redirect(action:searchUtility11)        				}else        				{        			if(startDate1 && endDate1 && categories=="xyz" && status=="xyz")        				{        				 arr11 = ApplicationProcessingDetails.executeQuery("select distinct application from ApplicationProcessingDetails dateCheck1 where  (dateCheck1.officer = ? OR dateCheck1.officerFwd = ? ) and dateCheck1.dateCreated >=? and dateCheck1.dateCreated <=? ",  [((session.userMaster).toString()).trim(),((session.userMaster).toString()).trim(),sqlDate,sqlDate2] );        				}        				}        			  }        			}        		}	        	if(abc.getClass().getName()=="java.util.ArrayList")        			{        			if(arr11.size()==0)        			{        				flash.message="No Result Found With This Search Combination"        			}        			}        		session.sqlDate=sqlDate        		session.sqlDate2=sqlDate2        		session.sqlDate3=sqlDate3        		session.arr11=arr11    	    render(view:'searchUtility11',model:[appIdList:appIdList,abc:abc,arr11:arr11])        }catch(Exception e) {            e.printStackTrace();    		 flash.message = "Server Busy ..Please try after some time....";    		if(session.indUser){    	redirect(controller:'indUser',action:'openIndustryHome')    }    else if(session.userMaster){    redirect(controller:'userMaster',action:'openSpcbHome');    }else{        session.invalidate()        redirect(uri:'/index.gsp');    }    }       }    //  New code for White category search by Deepak    def searchWhiteUtility={    	    }    	def searchWhite={    	def allsummary;    	if(params.searchOp=='ApplName'){    		 def indName=params.autocomplete_parameter1    		allsummary=WhiteCategoryIntegration.findAll("from WhiteCategoryIntegration where indUser.indName=? order by id desc",[indName])    		    	}else if(params.searchOp=='ApplId'){    		def indId=params.autocomplete_parameter    		allsummary=WhiteCategoryIntegration.findAll("from WhiteCategoryIntegration where id=?  order by id desc",[indId.toLong()])    	}else if(params.searchOp=='Others'){    		 def sdfh = new SimpleDateFormat("dd/MM/yyyy");    		 def x = sdfh.parse(params.start_date_value); //Date   		  	def	y = sdfh.parse(params.end_date_value);  //Date   		  	java.sql.Date date1 = new java.sql.Date(x.getTime())    			java.sql.Date date2 = new java.sql.Date(y.getTime())    		  	java.sql.Date date3 = new java.sql.Date(sdfh.parse("21/01/2020").getTime())    		  	if(date3>date1){   		  	flash.message = "Search details after 21/01/2020";   		  	render(view:'searchWhiteUtility',model:[abc:allsummary])   	    	return;   		  	}   		  	date2.setDate((date2.getDate()+1))   			allsummary=WhiteCategoryIntegration.findAll("from WhiteCategoryIntegration where dateOfCreated>=? and  dateOfCreated<=?  order by id desc",[date1,date2])    	    	}    	    	if(allsummary){    		println("allsummary----->"+allsummary)    	}else{    		 flash.message = "No Details found";    	}    	session.allsummary=allsummary    render(view:'searchWhiteUtility',model:[abc:allsummary])    	return;    }        def printWhiteCategoryApp={  	  def allsummary=session.allsummary  	    return[abc:allsummary]  }        def popWhiteSummary=    {    def allsummary=session.allsummary    return[abc:allsummary]    }    // Ends}